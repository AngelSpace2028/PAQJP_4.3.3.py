exec("""\nb='.jpeg'\na='rb'\nZ='wb'\nY=input\nW='.txt'\nV='.jpg'\nU=True\nT='utf-8'\nQ=False\nP=min\nO='0'\nN=open\nM=print\nL=max\nJ='1'\nI=Exception\nH=''\nG=int\nF=bytes\nE=bytearray\nD=None\nB=range\nA=len\nimport os,sys,math as c,struct,array,random as K,heapq as R,binascii as d,logging as C,paq,zlib as S\nfrom typing import List,Dict,Tuple,Optional,Union\nfrom enum import Enum as e\nfrom mpmath import mp\nC.basicConfig(level=C.INFO,format='%(asctime)s - %(levelname)s - %(message)s')\nu='PAQJP_4'\nv=9\nw=1<<15\nx=1024\ndef k(num_digits=1000000):\n	B=num_digits\n	try:\n		mp.dps=B+2;J=mp.nstr(mp.pi,B,strip_zeros=Q,min_fixed=0,max_fixed=0);D=[G(A)for A in J[2:]if A.isdigit()][:B]\n		if A(D)<B:C.warning(f"Generated only {A(D)} digits, padding with fallback");E=[3,1,4];D.extend(E*((B-A(D))//A(E)+1));D=D[:B]\n		if not all(0<=A<=9 for A in D):C.error('Generated pi digits contain invalid values');raise ValueError('Invalid pi digits generated')\n		F=[A*255//9%256 for A in D];C.info(f"Generated {A(F)} base-10 pi digits (mapped to 0-255)");return F\n	except I as K:C.error(f"Failed to generate base-10 pi digits: {K}");E=[3,1,4];H=[A*255//9%256 for A in E];C.warning(f"Using {A(H)} fallback base-10 digits, repeating to {B}");return H*(B//A(E)+1)[:B]\nl=k(1000000)\nf=[A for A in B(2,256)if all(A%B!=0 for B in B(2,G(A**.5)+1))]\nclass X(e):DEFAULT=0;JPEG=1;EXE=2;TEXT=3\nclass y(e):COMPRESS=0;DECOMPRESS=1\nclass z:\n	def __init__(A,s=H):A.data=E(s.encode(T))\n	def resize(B,new_size):\n		C=new_size\n		if C>A(B.data):B.data+=E(C-A(B.data))\n		else:B.data=B.data[:C]\n	def size(B):return A(B.data)\n	def c_str(A):return A.data.decode(T)\n	def __iadd__(A,s):A.data+=s.encode(T);return A\n	def __getitem__(A,index):return A.data[index]\n	def __setitem__(A,index,value):A.data[index]=value\n	def __str__(A):return A.data.decode(T)\nclass g:\n	def __init__(A,size=0,initial_value=0):A.data=array.array('B',[initial_value]*size)\n	def resize(B,new_size):\n		C=new_size\n		if C>A(B.data):B.data.extend([0]*(C-A(B.data)))\n		else:B.data=B.data[:C]\n	def size(B):return A(B.data)\n	def __getitem__(A,index):return A.data[index]\n	def __setitem__(A,index,value):A.data[index]=value\n	def __len__(B):return A(B.data)\nclass m:\n	def __init__(A,size=0):A.size_=size;A.data=g(size);A.pos=0\n	def setsize(B,size):\n		A=size\n		if A>0 and A&A-1==0:B.size_=A;B.data.resize(A)\n	def __getitem__(A,index):return A.data[index&A.size_-1]\n	def __call__(A,i):return A.data[A.pos-i&A.size_-1]\n	def size(A):return A.size_\nA0=m()\nclass h:\n	def __init__(A,left=D,right=D,symbol=D):A.left=left;A.right=right;A.symbol=symbol\n	def is_leaf(A):return A.left is D and A.right is D\nclass n:\n	def __init__(A):A.table=[[1,2,0,0],[3,5,1,0],[4,6,0,1],[7,10,2,0],[8,12,1,1],[9,13,1,1],[11,14,0,2],[15,19,3,0],[16,23,2,1],[17,24,2,1],[18,25,2,1],[20,27,1,2],[21,28,1,2],[22,29,1,2],[26,30,0,3],[31,33,4,0],[32,35,3,1],[32,35,3,1],[32,35,3,1],[32,35,3,1],[34,37,2,2],[34,37,2,2],[34,37,2,2],[34,37,2,2],[34,37,2,2],[34,37,2,2],[36,39,1,3],[36,39,1,3],[36,39,1,3],[36,39,1,3],[38,40,0,4],[41,43,5,0],[42,45,4,1],[42,45,4,1],[44,47,3,2],[44,47,3,2],[46,49,2,3],[46,49,2,3],[48,51,1,4],[48,51,1,4],[50,52,0,5],[53,43,6,0],[54,57,5,1],[54,57,5,1],[56,59,4,2],[56,59,4,2],[58,61,3,3],[58,61,3,3],[60,63,2,4],[60,63,2,4],[62,65,1,5],[62,65,1,5],[50,66,0,6],[67,55,7,0],[68,57,6,1],[68,57,6,1],[70,73,5,2],[70,73,5,2],[72,75,4,3],[72,75,4,3],[74,77,3,4],[74,77,3,4],[76,79,2,5],[76,79,2,5],[62,81,1,6],[62,81,1,6],[64,82,0,7],[83,69,8,0],[84,76,7,1],[84,76,7,1],[86,73,6,2],[86,73,6,2],[44,59,5,3],[44,59,5,3],[58,61,4,4],[58,61,4,4],[60,49,3,5],[60,49,3,5],[76,89,2,6],[76,89,2,6],[78,91,1,7],[78,91,1,7],[80,92,0,8],[93,69,9,0],[94,87,8,1],[94,87,8,1],[96,45,7,2],[96,45,7,2],[48,99,2,7],[48,99,2,7],[88,101,1,8],[88,101,1,8],[80,102,0,9],[103,69,10,0],[104,87,9,1],[104,87,9,1],[106,57,8,2],[106,57,8,2],[62,109,2,8],[62,109,2,8],[88,111,1,9],[88,111,1,9],[80,112,0,10],[113,85,11,0],[114,87,10,1],[114,87,10,1],[116,57,9,2],[116,57,9,2],[62,119,2,9],[62,119,2,9],[88,121,1,10],[88,121,1,10],[90,122,0,11],[123,85,12,0],[124,97,11,1],[124,97,11,1],[126,57,10,2],[126,57,10,2],[62,129,2,10],[62,129,2,10],[98,131,1,11],[98,131,1,11],[90,132,0,12],[133,85,13,0],[134,97,12,1],[134,97,12,1],[136,57,11,2],[136,57,11,2],[62,139,2,11],[62,139,2,11],[98,141,1,12],[98,141,1,12],[90,142,0,13],[143,95,14,0],[144,97,13,1],[144,97,13,1],[68,57,12,2],[68,57,12,2],[62,81,2,12],[62,81,2,12],[98,147,1,13],[98,147,1,13],[100,148,0,14],[149,95,15,0],[150,107,14,1],[150,107,14,1],[108,151,1,14],[108,151,1,14],[100,152,0,15],[153,95,16,0],[154,107,15,1],[108,155,1,15],[100,156,0,16],[157,95,17,0],[158,107,16,1],[108,159,1,16],[100,160,0,17],[161,105,18,0],[162,107,17,1],[108,163,1,17],[110,164,0,18],[165,105,19,0],[166,117,18,1],[118,167,1,18],[110,168,0,19],[169,105,20,0],[170,117,19,1],[118,171,1,19],[110,172,0,20],[173,105,21,0],[174,117,20,1],[118,175,1,20],[110,176,0,21],[177,105,22,0],[178,117,21,1],[118,179,1,21],[120,184,0,23],[185,115,24,0],[186,127,23,1],[128,187,1,23],[120,188,0,24],[189,115,25,0],[190,127,24,1],[128,191,1,24],[120,192,0,25],[193,115,26,0],[194,127,25,1],[128,195,1,25],[120,196,0,26],[197,115,27,0],[198,127,26,1],[128,199,1,26],[120,200,0,27],[201,115,28,0],[202,127,27,1],[128,203,1,27],[120,204,0,28],[205,115,29,0],[206,127,28,1],[128,207,1,28],[120,208,0,29],[209,125,30,0],[210,127,29,1],[128,211,1,29],[130,212,0,30],[213,125,31,0],[214,137,30,1],[138,215,1,30],[130,216,0,31],[217,125,32,0],[218,137,31,1],[138,219,1,31],[130,220,0,32],[221,125,33,0],[222,137,32,1],[138,223,1,32],[130,224,0,33],[225,125,34,0],[226,137,33,1],[138,227,1,33],[130,228,0,34],[229,125,35,0],[230,137,34,1],[138,231,1,34],[130,232,0,35],[233,125,36,0],[234,137,35,1],[138,235,1,35],[130,236,0,36],[237,125,37,0],[238,137,36,1],[138,239,1,36],[130,240,0,37],[241,125,38,0],[242,137,37,1],[138,243,1,37],[130,244,0,38],[245,135,39,0],[246,137,38,1],[138,247,1,38],[140,248,0,39],[249,135,40,0],[250,69,39,1],[80,251,1,39],[140,252,0,40],[249,135,41,0],[250,69,40,1],[80,251,1,40],[140,252,0,41]]\n	def nex(A,state,sel):return A.table[state][sel]\nA1=n()\ndef o(data,repeat=7):\n	C=E(data)\n	for D in f:\n		G=D if D==2 else L(1,c.ceil(D*4096/28672))\n		for I in B(repeat):\n			for H in B(0,A(C),3):C[H]^=G\n	return F(C)\ndef p(data,chunk_size=4):\n	C=chunk_size;D=E()\n	for G in B(0,A(data),C):H=data[G:G+C];D.extend([A^255 for A in H])\n	return F(D)\ndef i(n):\n	if n<2:return Q\n	if n==2:return U\n	if n%2==0:return Q\n	for A in B(3,G(n**.5)+1,2):\n		if n%A==0:return Q\n	return U\ndef j(n):\n	A=0\n	while U:\n		if i(n-A):return n-A\n		if i(n+A):return n+A\n		A+=1\ndef quit(message=D):\n	A=message\n	if A:M(A)\n	sys.exit(1)\ndef A2(x):\n	if x<0:return 0\n	A=0\n	while x>0:x>>=1;A+=1\n	return A\ndef q(d,n=12,repeat=1000):\n	C=(1<<n)-1;A=d\n	for E in B(repeat):\n		if A>2047:A=C\n		if A<-2047:A=0\n		D=(1<<n)/(1+c.exp(-A/512.));A=G(D);A=P(L(A,0),C)\n	return A\ndef A3(p):\n	A=g(4096);C=0\n	for D in B(-2047,2048):\n		E=q(D)\n		for F in B(C,E+1):A[F]=D\n		C=E+1\n	A[4095]=2047;return A[p]\ndef hash(*B):C=B[0]*200002979+B[1]*30005491+(B[2]if A(B)>2 else 4294967295)*50004239+(B[3]if A(B)>3 else 4294967295)*70004807+(B[4]if A(B)>4 else 4294967295)*110002499;return C^C>>9^B[0]>>2^B[1]>>3^(B[2]if A(B)>2 else 0)>>4^(B[3]if A(B)>3 else 0)>>5^(B[4]if A(B)>4 else 0)>>6\nclass r:\n	def __init__(A):A.compressor=D;A.PI_DIGITS=l;A.PRIMES=f;A.seed_tables=A.generate_seed_tables();A.max_intersections=28\n	def generate_seed_tables(D,num_tables=126,table_size=256,min_val=5,max_val=255,seed=42):\n		K.seed(seed);A=[]\n		for E in B(num_tables):C=[K.randint(min_val,max_val)for A in B(table_size)];A.append(C)\n		return A\n	def get_seed(B,table_idx,value):\n		C=table_idx\n		if 0<=C<A(B.seed_tables):return B.seed_tables[C][value%A(B.seed_tables[C])]\n		return 0\n	def binary_to_file(L,binary_data,filename):\n		D=binary_data\n		try:\n			E=G(D,2);F=(A(D)+7)//8;B='%0*x'%(F*2,E)\n			if A(B)%2!=0:B=O+B\n			H=d.unhexlify(B)\n			with N(filename,Z)as J:J.write(H)\n			return U\n		except I as K:C.error(f"Error saving file: {str(K)}");return Q\n	def file_to_binary(H,filename):\n		try:\n			with N(filename,a)as D:\n				B=D.read()\n				if not B:C.error('Error: Empty file');return\n				E=bin(G(d.hexlify(B),16))[2:];return E.zfill(A(B)*8)\n		except I as F:C.error(f"Error reading file: {str(F)}");return\n	def calculate_frequencies(C,binary_str):\n		A={}\n		for B in binary_str:A[B]=A.get(B,0)+1\n		return A\n	def build_huffman_tree(H,frequencies):\n		B=[(B,h(symbol=A))for(A,B)in frequencies.items()];R.heapify(B)\n		while A(B)>1:C,D=R.heappop(B);E,F=R.heappop(B);G=h(left=D,right=F);R.heappush(B,(C+E,G))\n		return B[0][1]\n	def generate_huffman_codes(D,root,current_code=H,codes={}):\n		C=current_code;B=codes;A=root\n		if A.is_leaf():B[A.symbol]=C or O;return B\n		if A.left:D.generate_huffman_codes(A.left,C+O,B)\n		if A.right:D.generate_huffman_codes(A.right,C+J,B)\n		return B\n	def compress_data_huffman(B,binary_str):\n		C=binary_str\n		if not C:return H\n		D=B.calculate_frequencies(C);E=B.build_huffman_tree(D);A=B.generate_huffman_codes(E)\n		if O not in A:A[O]=O\n		if J not in A:A[J]=J\n		F=H.join(A[B]for B in C);return F\n	def decompress_data_huffman(B,compressed_str):\n		C=compressed_str\n		if not C:return H\n		F=B.calculate_frequencies(C);G=B.build_huffman_tree(F);I=B.generate_huffman_codes(G);D={B:A for(A,B)in I.items()};E=H;A=H\n		for J in C:\n			A+=J\n			if A in D:E+=D[A];A=H\n		return E\n	def compress_data_zlib(B,data_bytes):\n		try:return S.compress(data_bytes)\n		except S.error as A:C.error(f"zlib compression error: {A}");return\n	def decompress_data_zlib(B,compressed_data):\n		try:return S.decompress(compressed_data)\n		except S.error as A:C.error(f"zlib decompression error: {A}");return\n	def paq_compress(A,data):return paq.compress(data)\n	def paq_decompress(A,data):return paq.decompress(data)\n	def transform_01(A,data):return o(data,repeat=7)\n	def reverse_transform_01(A,data):return A.transform_01(data)\n	def transform_03(A,data):return p(data)\n	def reverse_transform_03(A,data):return A.transform_03(data)\n	def transform_04(G,data,repeat=50):\n		C=E(data)\n		for H in B(repeat):\n			for D in B(A(C)):C[D]=(C[D]-D%256)%256\n		return F(C)\n	def reverse_transform_04(G,data,repeat=50):\n		C=E(data)\n		for H in B(repeat):\n			for D in B(A(C)):C[D]=(C[D]+D%256)%256\n		return F(C)\n	def transform_05(H,data,shift=3):\n		G=shift;C=E(data)\n		for D in B(A(C)):C[D]=(C[D]<<G|C[D]>>8-G)&255\n		return F(C)\n	def reverse_transform_05(H,data,shift=3):\n		G=shift;C=E(data)\n		for D in B(A(C)):C[D]=(C[D]>>G|C[D]<<8-G)&255\n		return F(C)\n	def transform_06(H,data,seed=42):\n		K.seed(seed);D=list(B(256));K.shuffle(D);C=E(data)\n		for G in B(A(C)):C[G]=D[C[G]]\n		return F(C)\n	def reverse_transform_06(J,data,seed=42):\n		K.seed(seed);G=list(B(256));K.shuffle(G);H=[0]*256\n		for(C,I)in enumerate(G):H[I]=C\n		D=E(data)\n		for C in B(A(D)):D[C]=H[D[C]]\n		return F(D)\n	def transform_07(J,data):\n		D=data;H=E(D);K=A(J.PI_DIGITS);O=A(D)/1024;M=P(10,L(1,G(O)));C.info(f"transform_07: Using {M} cycles for {A(D)} bytes (base-256)");N=A(D)%K;Q=J.PI_DIGITS[N:]+J.PI_DIGITS[:N];R=A(D)%256\n		for I in B(A(H)):H[I]^=R\n		for T in B(M):\n			for I in B(A(H)):S=Q[I%K];H[I]^=S\n		return F(H)\n	def reverse_transform_07(J,data):\n		D=data;H=E(D);K=A(J.PI_DIGITS);O=A(D)/1024;M=P(10,L(1,G(O)));C.info(f"reverse_transform_07: Using {M} cycles for {A(D)} bytes (base-256)");N=A(D)%K;Q=J.PI_DIGITS[N:]+J.PI_DIGITS[:N]\n		for T in B(M):\n			for I in B(A(H)):R=Q[I%K];H[I]^=R\n		S=A(D)%256\n		for I in B(A(H)):H[I]^=S\n		return F(H)\n	def transform_08(J,data):\n		D=data;H=E(D);K=A(J.PI_DIGITS);O=A(D)/1024;M=P(10,L(1,G(O)));C.info(f"transform_08: Using {M} cycles for {A(D)} bytes (base-256)");N=A(D)%K;Q=J.PI_DIGITS[N:]+J.PI_DIGITS[:N];R=j(A(D)%256)\n		for I in B(A(H)):H[I]^=R\n		for T in B(M):\n			for I in B(A(H)):S=Q[I%K];H[I]^=S\n		return F(H)\n	def reverse_transform_08(J,data):\n		D=data;H=E(D);K=A(J.PI_DIGITS);O=A(D)/1024;M=P(10,L(1,G(O)));C.info(f"reverse_transform_08: Using {M} cycles for {A(D)} bytes (base-256)");N=A(D)%K;Q=J.PI_DIGITS[N:]+J.PI_DIGITS[:N]\n		for T in B(M):\n			for I in B(A(H)):R=Q[I%K];H[I]^=R\n		S=j(A(D)%256)\n		for I in B(A(H)):H[I]^=S\n		return F(H)\n	def compress_with_best_method(B,data,filetype,output_file):\n		L=output_file;Q=B.transform_08(data);R=[('paq',B.paq_compress),('zlib',B.compress_data_zlib)];E=D;M=float('inf');G=D\n		for(O,S)in R:\n			try:\n				H=S(Q)\n				if H is D:continue\n				P=A(H)\n				if P<M:M=P;E=H;G=O\n			except I as J:C.warning(f"Compression method {O} failed: {J}");continue\n		if E is D:C.error('All compression methods failed.');return\n		K=F([8])+E;C.info(f"Best compression method: {G} for {filetype.name}")\n		try:\n			with N(L,Z)as T:T.write(K)\n			C.info(f"Compression successful. Output saved to {L}. Size: {A(K)} bytes")\n		except I as J:C.error(f"Error saving compressed file: {J}");return\n		return K,G\n	def decompress_with_best_method(B,data):\n		F=data\n		if A(F)<1 or F[0]!=8:C.error('Invalid input: Missing 0x08 marker byte.');return b'',D\n		G=F[1:]\n		try:E=B.paq_decompress(G);return B.reverse_transform_08(E),8\n		except I as H:C.warning(f"PAQ decompression failed: {H}. Trying zlib...")\n		E=B.decompress_data_zlib(G)\n		if E is D:C.error('All decompression methods failed.');return b'',D\n		return B.reverse_transform_08(E),8\ndef s(filename):\n	B,A=os.path.splitext(filename.lower())\n	if A==V or A==b:return X.JPEG\n	elif A==W:return X.TEXT\n	else:return X.DEFAULT\ndef t():\n	M('PAQJP_4 Compression System with Base-10 Pi Transformation (1,000,000 digits, Transform 08, 0x08 Marker, Save Best)');M('Created by Jurijus Pacalovas.');M('Options:');M('1 - Compress file (PAQJP_4 with transform_08, PAQ/zlib, 0x08 marker, save best)');M('2 - Decompress file (PAQJP_4 with transform_08, PAQ/zlib, check 0x08 marker)');P=r()\n	try:\n		G=Y('Enter 1 or 2: ').strip()\n		if G not in(J,'2'):C.error('Invalid choice. Exiting.');return\n	except EOFError:C.info('No input detected. Defaulting to Compress (1).');G=J\n	B=Y('Input file name: ').strip();E=Y('Output file name: ').strip()\n	if not os.path.isfile(B):C.error(f"Error: Input file '{B}' does not exist.");return\n	Q=s(B);C.info(f"Detected filetype: {Q.name}")\n	if G==J:\n		with N(B,a)as K:F=K.read()\n		R,d=P.compress_with_best_method(F,Q,E)\n		if R is D:return\n		L=A(F);H=A(R);T=H/L*100 if L>0 else 0;C.info(f"Original: {L} bytes, Compressed (with 0x08 marker): {H} bytes, Ratio: {T:.2f}%")\n	elif G=='2':\n		with N(B,a)as K:F=K.read()\n		try:\n			O,e=P.decompress_with_best_method(F)\n			if O is D:return\n			S=os.path.splitext(B)[1].lower()\n			if not E.endswith((V,b,W)):\n				if S in[V,b]:E+=V\n				elif S==W:E+=W\n			with N(E,Z)as U:U.write(O)\n			H=A(F);X=A(O);C.info(f"Decompression successful. Output saved to {E}.");C.info(f"Compressed (with 0x08 marker): {H} bytes, Decompressed: {X} bytes")\n		except I as c:C.error(f"Error during decompression: {c}")\nif __name__=='__main__':t()\n""")
